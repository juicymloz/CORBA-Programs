/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package implementacion;

import interfaz.Peer;
import interfaz.PeerHelper;
import interfaz.PeerPOA;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.BindingIteratorHolder;
import org.omg.CosNaming.BindingListHolder;
import org.omg.CosNaming.BindingType;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContext;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextHelper;
import org.omg.CosNaming.NamingContextPackage.AlreadyBound;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

/**
 *
 * @author Javier
 */
public class BullyCorba extends javax.swing.JFrame {
    
    //Metodo que devuelve un ArrayList con los nombres de los Peers activos en la ejecucion del programa...
    //... obtenidos a traves del servicio de nombres de CORBA.
    public static ArrayList<String> printContext(NamingContext nc, String parent) {
        try {
            final int batchSize = 1000;
            ArrayList<String> referencias = new ArrayList<>();
            BindingListHolder bList = new BindingListHolder( );
            BindingIteratorHolder bIterator = new BindingIteratorHolder( );

            nc.list( batchSize, bList, bIterator );

            for ( int i=0; i < bList.value.length; i++ ) {
                NameComponent[] name = { bList.value[i].binding_name[0] };
                if (bList.value[i].binding_type == BindingType.ncontext) {
                    NamingContext context = NamingContextHelper.narrow(nc.resolve( name ) );
                    //Peer object = PeerHelper.narrow(nc.resolve_str("asd"));
                    printContext( context, parent + name[0].id + "." );
                } else {
                    //System.out.println( parent + name[0].id );
                    referencias.add(name[0].id);
                }
            }
            return referencias;
        } catch (Exception e) {
            System.out.println("ERROR : " + e) ;
            return null;
        }
    }
    /**
     * Creates new form BullyCorba
     */
    
    //Variables globales del programa.
    public static String id="";  //Identificador unico de cada Peer.
    public static NamingContextExt ncRef;  //Servicio de nombres.
    public static ArrayList<String> refer;  //ArrayList - Nombre de los Peers.
    public static boolean coordinador = false;  //Saber si un Peer es coordinador
    public BullyCorba() {
        initComponents();
        this.setTitle(id);  //Titulo de la ventana del JFrame con el id solicitado.
        this.mensaje.setText("");  //Bandeja o campo oculto "mensaje" vacio de todos los Peers.
        //Hacemos estos campos ocultos.
        this.mensaje.setVisible(false);
        this.idRecibido.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        mensaje = new javax.swing.JTextField();
        idRecibido = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jTextField1.setEditable(false);

        mensaje.setEditable(false);

        idRecibido.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(idRecibido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jTextField1)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idRecibido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        // -- Cuando la ventana se cierra --
        
        //Unicamente removemos el Peer que cierra su ventana del servicio de nombres.
        
        NameComponent pathaux[];
        try {
            refer = printContext(ncRef, "");  //Actualiza la lista de los Peers activos en el sistema.
            pathaux = ncRef.to_name(this.id);  //Obtiene la referencia del Peer que da click en cerrar.
            ncRef.unbind(pathaux);  //Lo remueve.
        } catch (org.omg.CosNaming.NamingContextPackage.InvalidName | NotFound | CannotProceed ex) {
            
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        //Todo el algoritmo se concentra en este metodo, es decir, mientras el Peer...
        //... se mantenga activo en el sistema. El funcionamiento general es el siguiente:
        
        //El coordinador se desgina en quien tiene el ID mas grande.
        //El coordinador envia su hora cada 0.2 seg. y los sirvientes verifican y vacian su bandeja de entrada cada 1 seg.
        //El sirviente:
        //     Vacia la bandeja y si en el prox. seg antes de vaciar de nuevo verifica que no hay hora...
        //     enviada del coordinador, por tanto el coordinador dejo de estar activo en la red, por...
        //     lo que se convocan eleciones.
        
        //En elecciones:
        //  1a. El proceso que nota la ausencia del coordinador envia un msj "eleccion" a todos los Peers...
        //      con un ID mayor a él mismo.
        //  2a. Los procesos que reciben un "eleccion".
        //      1b. Le envian una contestacion "ok" al Peer anterior.
        //      2b. Estos Peers repiten el paso 1a.
        //  3a. El proceso que recibe "ok", se dormira 1 seg. y al despertar:
        //      1c. Si su mensaje sigue siendo "ok" aun no hay coordinador, vacia su bandeja de entrada y...
        //          eventualmente convocará elecciones de nuevo.
        //      2c. Si su mensaje es "coordinador" las elecciones terminan y vuelve a trabajar el algoritmo...
        //          de normal con el coordinador enviando su hra cada 0.2 seg y los sirvientes actualizando su...
        //          bandeja cada seg.
        
        // ==NOTAS==
        // - Como todos los Peers deben tener una conexion directa con todos, si un Peer nuevo con un ID mayor al...
        //   ...del coordinador actual, este pasara a ser el nuevo coordinador.
        // - El/Los proceso(s) que recibe(n) "ok" debe(n) dormirse ya que al ser todo muy rapido no da tiempo a que las eleciones...
        //   ...encuentren un coordinador.
        // - A la bandeja de entrada nos referimos al campo oculto "mensaje".
        
        //Timer del coordinador para enviar su hora cada 0.2 seg.
        Timer accionCoordinador = new Timer(200, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                refer = printContext(ncRef, "");  //Actualiza la lista de los Peers activos en el sistema.
                if(coordinador){  //Para que entre solo el Peer coordinador.
                    jTextField1.setText("Soy el coordinador");  //Imprime en su pantalla que es coordinador.
                    for (int i = 0; i < refer.size(); i++) {  //A cada uno de los Peers en la red...
                        if(!refer.get(i).equals(id)){   //...que no sea el mismo...
                            try {
                                Peer object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i)));  //...obtiene la refencia a cada uno de los Peers.
                                LocalTime hora = LocalTime.now();   //Obtenemos la hora.
                                String msj= "Coordinador "+id + ": "+ hora;   //Preparamos el mensaje del coordinador.
                                object.enviarHora(Integer.valueOf(id), msj);   //Enviamos la hra a todos los Peers.
                            } catch (NotFound | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
                                Logger.getLogger(BullyCorba.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
        });
        
        //Timer para los procesos sirvientes cada seg.
        Timer accionPeer = new Timer(1000, new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e) {
                    if(!coordinador){  //Para que entren solo los procesos sirvientes.
                        //Verifica si su campo oculto esta vacio, es decir...
                        if(mensaje.getText().equals("")){  //Si el Peer tiene su bandeja vacia...
                            //...significa que no recibe mensajes del coordinador y, por tanto, conovcará elecciones.
                            refer = printContext(ncRef, "");  //Actualiza la lista de los Peers activos en el sistema.
                            int idMayores = 0;  //Para contar si hay procesos con un ID mayor al Peer que ejecuta esto.
                            for (int i = 0; i<refer.size() ; i++) {  //A cada uno de los Peers activos en el sistema...
                                //...que no sea él mismo y tenga un ID mayor al que ejecuta esto...
                                if(!refer.get(i).equals(id) && Integer.parseInt(refer.get(i))>Integer.parseInt(id)){  
                                    try {
                                        Peer object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i))); //...obtiene la referencia a ese Peer y...
                                        object.enviarMensaje(Integer.valueOf(id),"eleccion");  //... le envia un msj de que hay elecciones.
                                        idMayores++;  //Aumenta que se encontró con un Peer mayor.
                                    } catch (NotFound | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
                                        Logger.getLogger(BullyCorba.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                            //Si no encontró ninguno mayor, pasa directamente a ser coordinador por razones logicas.
                            if(idMayores==0){ 
                                    coordinador=true;
                                }
                        }
                        if(mensaje.getText().equals("eleccion")){ //Si el Peer tiene un mensaje "eleccion"
                            System.out.println("eleccion");//Si un peer recibe un convocacion a elecciones, este responde con un ok
                            try {//Puesto que tiene un ID mayor al sujeto que convoco las elecciones
                                //Obtiene la referencia del Peer que lo contacto...
                                Peer object = PeerHelper.narrow(ncRef.resolve_str(idRecibido.getText()));
                                //... y le contesta un "ok"
                                object.enviarMensaje(Integer.valueOf(id),"ok");
                                //Realiza el mismo proceso de mandar msj "eleccion" a todos sus Peers mayores a él igual que arriba.
                                refer = printContext(ncRef, "");
                                int idMayores = 0;
                                for (int i = 0; i<refer.size() ; i++) {//Convocara elecciones a todos con un ID mayor
                                    if(!refer.get(i).equals(id) && Integer.parseInt(refer.get(i))>Integer.parseInt(id)){
                                        object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i)));
                                        object.enviarMensaje(Integer.valueOf(id),"eleccion");
                                        idMayores++;
                                    }
                                }
                                if(idMayores==0){
                                    coordinador=true;
                                }
                            } catch (NotFound | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
                                Logger.getLogger(BullyCorba.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(mensaje.getText().equals("ok")){  //Si el Peer tiene un mensaje "ok".
                            mensaje.setText("ok");  //Mantiene su msj en un "ok" y ...
                            try {
                                //... se duerme 1 seg.
                                Thread.sleep(1000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(BullyCorba.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            //Si al despertar sigue con su mismo msj "ok" sigue sin haber coordinador y ...
                            if(mensaje.getText().equals("ok")){
                                mensaje.setText(""); //... vaciara su msj para eventualmente convocar elecciones nuevamente.
                            }
                        }
                        if(mensaje.getText().equals("coordinador")){  //Si el Peer tiene un mensaje "coordinador".
                            mensaje.setText("");  //Vacia dicho msj. Esta linea garantiza la exitencia del coordinador.
                            //De aqui en adelante lo que resta del if es basicamente verificar que el coordinador actual tiene un ID...
                            //... mayor al del sirviente que ejecuta esto. Esto es mas que nada por los nuevos Peers que vayan entrando...
                            //... a la red, ya que...
                            if(Integer.valueOf(idRecibido.getText())<Integer.valueOf(id)){ //Si el coordinador tiene un ID menor al del sirviente...
                                refer = printContext(ncRef, "");  //Actualiza la lista de los Peers activos en el sistema.
                                try{
                                    Peer object = PeerHelper.narrow(ncRef.resolve_str(idRecibido.getText()));  //Obtiene la referencia del Peer coordinador...
                                    object.coordinador();  //... y lo releva de su cargo como coordinador.
                                    //Finalmente se convocan elecciones.
                                    int idMayores = 0;
                                    for (int i = 0; i<refer.size() ; i++) {
                                        if(!refer.get(i).equals(id) && Integer.parseInt(refer.get(i))>Integer.parseInt(id)){
                                            object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i)));
                                            object.enviarMensaje(Integer.valueOf(id),"eleccion");
                                            idMayores++;
                                        }
                                    }
                                    if(idMayores==0){
                                        coordinador=true;
                                    }
                                }
                                catch (NotFound | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
                                            Logger.getLogger(BullyCorba.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }   
                }
            });
        //Timers ejecutandose a sus respectivos tiempos siempre que la ventana esta abierta.
        accionCoordinador.start();
        accionPeer.start();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BullyCorba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BullyCorba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BullyCorba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BullyCorba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        try{
            
            // Crea e inicializa el ORB de CORBA
            ORB orb = ORB.init(args, null);
            // Referencia al POA raiz y activa el manejador de POA
            POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootpoa.the_POAManager().activate();
            
            PeerImpl peer = new PeerImpl();
            // Obtiene la referencia al objeto del servidor
            
            org.omg.CORBA.Object ref = rootpoa.servant_to_reference(peer);
            Peer href = PeerHelper.narrow(ref);
            
            // Obtiene el naming context de la raiz
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            // Usa el NamingContextExt en lugar de NamingContext. 
            // Esto es parte de Interoperable naming Service.
            ncRef = NamingContextExtHelper.narrow(objRef);
            
            //Pedimos el ID al usuario, es importante que en este caso sea...
            //... un numero, ya que elegimos al proceso coordinador en base al...
            //... ID mas grande.
            id = JOptionPane.showInputDialog("Introduce tu ID");
            BullyCorba.id = id;  //Asignamos dicho ID al titulo del JFrame.
            //Guardamos la referencia a este objeto en el servicio de nombres.
            NameComponent path[] = ncRef.to_name( id );
            ncRef.bind(path, href);
            
            //Actualizamos el ArrayList que contiene los nombres de los Peers.
            refer = printContext(ncRef, "");
            
            //En caso de que no se cierre un Peer como debe ser (desde la ventana), pj. por consola ...
            //... Descomentar el for justo debajo, correr el programa y volver a comentarlo. Su funcion es...
            //... limpiar completamente nuestro servicio de nombres con el fin de borrar la referencia de...
            //... objeto de dicho Peer que ya no existe.
            
            /*
            for (int i = 0; i<refer.size() ; i++) {
                NameComponent pathaux[] = ncRef.to_name(refer.get(i));
                ncRef.unbind(pathaux);
            }
            */
            
            //Muestra en consola la lista Peers activos en el sistema.
            for (int i = 0; i < refer.size(); i++) {
                System.out.println(refer.get(i));
            }
            
            //Activa la interfaz grafica.
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new BullyCorba().setVisible(true);
                }
            });
            //Inicializamos el objeto CORBA.
            orb.run();
        }catch(InvalidName | AdapterInactive | ServantNotActive | WrongPolicy | HeadlessException | org.omg.CosNaming.NamingContextPackage.InvalidName | NotFound | CannotProceed | AlreadyBound e){
            
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField idRecibido;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField mensaje;
    // End of variables declaration//GEN-END:variables
    static class PeerImpl extends PeerPOA {

        private ORB orb;

        @Override
        public void enviarHora(int id, String msj) {
            //El proceso sirviente actualiza su campo oculto "idRecibido" con el ID del Peer coordinador.
            idRecibido.setText(String.valueOf(id));
            //El proceso sirviente actualiza su campo oculto "mensaje" con la palabra "coordinador"
            mensaje.setText("coordinador");
            //Muestra en su ventana el msj preparado del coordinador.
            jTextField1.setText(msj);
        }
        
        @Override
        public void enviarMensaje(int id, String msj) {
            //El proceso sirviente actualiza su campo oculto "idRecibido" con el ID del Peer que lo contacto.
            idRecibido.setText(String.valueOf(id));
            //El proceso sirviente actualiza su campo oculto "mensaje" con un msj correspondiente (eleccion, ok, coordinador).
            mensaje.setText(msj);
        }
        
        @Override
        public void coordinador(){  //Cambio de rol del coordinador.
            coordinador=false;         
        }
    }
}
