/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package implementacion;

import interfaz.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import org.omg.CosNaming.BindingType;
import org.omg.CORBA.ORB;
import org.omg.CosNaming.BindingIteratorHolder;
import org.omg.CosNaming.BindingListHolder;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContext;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextHelper;
import org.omg.CosNaming.NamingContextPackage.AlreadyBound;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.InvalidName;
//import org.omg.CosNaming.NamingContextPackage.NotEmpty;
import org.omg.CosNaming.NamingContextPackage.NotFound;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;



/**
 *
 * @author Javier
 */


public class Peer_Corba extends javax.swing.JFrame {
    
    //Metodo que devuelve un ArrayList con los nombres de los Peers activos en la ejecucion del programa...
    //... obtenidos a traves del servicio de nombres de CORBA.
    public static ArrayList<String> printContext(NamingContext nc, String parent) {
        try {
            final int batchSize = 1000;
            ArrayList<String> referencias = new ArrayList<>();
            BindingListHolder bList = new BindingListHolder( );
            BindingIteratorHolder bIterator = new BindingIteratorHolder( );

            nc.list( batchSize, bList, bIterator );

            for ( int i=0; i < bList.value.length; i++ ) {
                NameComponent[] name = { bList.value[i].binding_name[0] };
                if (bList.value[i].binding_type == BindingType.ncontext) {
                    NamingContext context = NamingContextHelper.narrow(nc.resolve( name ) );
                    //Peer object = PeerHelper.narrow(nc.resolve_str("Ejemplo"));
                    printContext( context, parent + name[0].id + "." );
                } else {
                    //System.out.println( parent + name[0].id );
                    referencias.add(name[0].id);
                }
            }
            return referencias;
        } catch (Exception e) {
            System.out.println("ERROR : " + e) ;
            return null;
        }
    }

    /**
     * Creates new form Peer_Corba
     */
    
    //Declaracion de variables globales del programa.
    public static String id="";  //Identificador de Peer.
    public static NamingContextExt ncRef;  //Servicio de nombres.
    public static ArrayList<String> refer;   //ArrayList - Nombre de los Peers.
    
    public Peer_Corba() {
        initComponents();
        this.setTitle(id);   //Titulo de la ventana del JFrame con el id solicitado.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        
        // -- Cuando la ventana se cierra --
        
        //El funcionamiento de este metodo consiste en dos cosas:
        // 1. Informar a todos los Peers de que un Peer especifico abandona la red.
        // 2. Eliminar su referencia de objeto del servicio de nombres.
        
        NameComponent pathaux[];
        try {
            //Obtenemos la lista actualizada de los Peers.
            refer = printContext(ncRef, "");
                       
            //1) Iteramos objeto por objeto de cada Peer e informamos que el Peer x abandona la red.
            for (int i = 0; i < refer.size(); i++) {
                Peer object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i)));
                String msj = this.id.toString() + " ha salido\n";
                object.enviar_Mensaje(msj);
            }
            
            //2) Por ultimo eliminamos dicho Peer del servicio de nombres (unbind).
            pathaux = ncRef.to_name(this.id);
            ncRef.unbind(pathaux);
        } catch (InvalidName | NotFound | CannotProceed ex) {
            Logger.getLogger(Peer_Corba.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        // -- Cuando presionamos el boton "Enviar" --
        
        //Este metodo consiste en obtener el mensaje del jTextField de un Peer y transmitirlo a todos en la red.
        
        try {
            //Obtenemos la lista actualizada de los Peers.
            refer = printContext(ncRef, "");
            
             //Guardamos la informacion del jTextField e iterando objeto por objeto...
             //... de cada Peer mostramos el mensaje en su respectivo chat.
            for (int i = 0; i < refer.size(); i++) {
                //System.out.println(i);
                Peer object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i)));
                String msj = this.id.toString() + ": " + this.jTextField1.getText() + "\n";
                object.enviar_Mensaje(msj);
            }
            
        } catch (NotFound | CannotProceed | InvalidName ex) {
            Logger.getLogger(Peer_Corba.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws org.omg.CosNaming.NamingContextPackage.AlreadyBound
     * @throws org.omg.PortableServer.POAManagerPackage.AdapterInactive
     * @throws org.omg.PortableServer.POAPackage.ServantNotActive
     * @throws org.omg.PortableServer.POAPackage.WrongPolicy
     */
    public static void main(String args[]) throws IOException, AlreadyBound, AdapterInactive, ServantNotActive, WrongPolicy {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Peer_Corba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try{
            /* Create and display the form */
                                  
            // Crea e inicializa el ORB de CORBA
            ORB orb = ORB.init(args, null);
            // Referencia al POA raiz y activa el manejador de POA
            POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootpoa.the_POAManager().activate();
            
            PeerImpl peer = new PeerImpl();
            // Obtiene la referencia al objeto del servidor
            
            org.omg.CORBA.Object ref = rootpoa.servant_to_reference(peer);
            Peer href = PeerHelper.narrow(ref);
            
            // Obtiene el naming context de la raiz
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            // Usa el NamingContextExt en lugar de NamingContext.
            // Esto es parte de Interoperable naming Service.
            ncRef = NamingContextExtHelper.narrow(objRef);
            
            //Antes de correr el Peer esperamos que el usuario ingrese un ID a dicho Peer.
            id = JOptionPane.showInputDialog("Introduce tu ID");
            
             //Asignamos dicho id al titulo de la ventana del JFrame.
            Peer_Corba.id = id;
            
            //Guardamos dicha referencia de objeto en nuestro servicio de nombres.
            NameComponent path[] = ncRef.to_name( id );
            ncRef.bind(path, href);
            
            //Actualizamos el ArrayList que contiene los nombres de los Peers.
            refer = printContext(ncRef, "");
            
            //En caso de que no se cierre un Peer como debe ser (desde la ventana), pj. por consola ...
            //... Descomentar el for justo debajo, correr el programa y volver a comentarlo. Su funcion es...
            //... limpiar completamente nuestro servicio de nombres con el fin de borrar la referencia de...
            //... objeto de dicho Peer que ya no existe.
            
            /*for (int i = 0; i<refer.size() ; i++) {
                NameComponent pathaux[] = ncRef.to_name(refer.get(i));
                ncRef.unbind(pathaux);
            }*/
            
            //Muestra en consola la lista Peers activos en el sistema.
            for (int i = 0; i < refer.size(); i++) {
                System.out.println(refer.get(i));
            }
            
            //Activa la interfaz grafica.
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Peer_Corba().setVisible(true);
                }
            });
            
            // Si hay mas de 1 Peer activo en el sistema, informa a todos los demas que ha ingresado...
            //... uno nuevo asi como el nombre del mismo (id).
            for (int i = 0; i < refer.size(); i++) {
                if(!refer.get(i).contains(id)){
                    Peer object = PeerHelper.narrow(ncRef.resolve_str(refer.get(i)));
                    String msj = id.toString() + " ha entrado\n";
                    object.enviar_Mensaje(msj);
                }
            }
            //Inicializamos el objeto CORBA.
            orb.run();
        }catch(org.omg.CORBA.ORBPackage.InvalidName |
            org.omg.CORBA.COMM_FAILURE exception){
            exception.printStackTrace();
        } catch (InvalidName | NotFound | CannotProceed ex) {
            ex.printStackTrace();
            Logger.getLogger(Peer_Corba.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
    //Clase con los metodos que dispondran los objetos remotos (metodos ya declarados en IDL).
    static class PeerImpl extends PeerPOA {
        private ORB orb;
        
        //Actualizamos la pantalla de chat con el mensaje enviado de un Peer.
        @Override
        public void enviar_Mensaje(String msj) {
            String mensajes = jTextArea1.getText();
            mensajes+= msj;
            jTextArea1.setText(mensajes);
        }
        
        //Metodo para apagar un Peer. (Propio de Corba).
        @Override
        public void shutdown() {
            orb.shutdown(false);
    }
}

}
